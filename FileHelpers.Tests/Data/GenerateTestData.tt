<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".autogen.cs" #>
<#@ assembly Name="System.Xml.dll" #>
<#@ assembly Name="System.Data.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
using FileHelpers;
using System.Diagnostics;
using System;

<#
    Process("Data");
#>
<#+
private FluentCode Code = new FluentCode();

public void Process(string folder)
{
    IServiceProvider hostServiceProvider = (IServiceProvider)Host;
    
    EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    
    /* Retrieve the project in which this template resides. */
    EnvDTE.ProjectItem containingProjectItem = dte.Solution.FindProjectItem(Host.TemplateFile);
    Project project = containingProjectItem.ContainingProject;
    
    ProcessProjectItem((ProjectItem)project.ProjectItems.Item(folder), null);
    
    WriteLine(Code.GenerateCode());
}

public void ProcessProjectItem(ProjectItem projectItem, ProjectItem parent)
{
    if (projectItem.ProjectItems.Count == 0)
    {
        switch(Path.GetFileName(projectItem.get_FileNames(0).ToLower()))
        { 
            case "generatetestdata.tt":
            case "generatetestdata.autogen.cs":
            case "fluentcode.cs":
            case "filetestbase.cs":
                    break;
                default:
                    //if (projectItem.get_FileNames(0).ToLower().EndsWith(".txt"))
                        RenderItemCore(projectItem, parent);
                    break;
        }
    }
    else
    {
        foreach (ProjectItem childItem in projectItem.ProjectItems)
        {
            ProcessProjectItem(childItem, projectItem);
        }
    }
}

private void RenderItemCore(ProjectItem item, ProjectItem parent)
{
    var filename = item.get_FileNames(0);
    var name = Path.GetFileNameWithoutExtension(filename);
    var filepath = ReplaceIgnoringCase(filename, Path.GetDirectoryName(Host.TemplateFile) + @"\", "");
    
    var resultClass = Code.Namespace("FileHelpers.Tests")
                        .Class("ClassesFileTest")
                        .Class(parent.Name, null)
                        .Class(name, "FileTestBase");
    resultClass.AddCode("protected override string GetFullPathName()", resultClass.Level + 1);
    resultClass.AddCode("{", resultClass.Level + 1);
    resultClass.AddCode("return System.IO.Path.Combine(" + "\"" + System.IO.Path.GetDirectoryName(filepath) + "\", \"" + System.IO.Path.GetFileName(filepath) + "\");", resultClass.Level + 2);
    resultClass.AddCode("}", resultClass.Level + 1);

    Code.Namespace("FileHelpers.Tests")
        .Class("FileTest")
        .Class(parent.Name, null)
        .AddStaticReadOnlyPropertyWithBackingField("ClassesFileTest." +parent.Name +"." + name, name);
}

private void WriteLine()
{
    WriteLine(string.Empty);
}
        
public static string ReplaceIgnoringCase(string original, string oldValue, string newValue)
{
    return Replace(original, oldValue, newValue, StringComparison.OrdinalIgnoreCase);
}

public static string Replace(string original, string oldValue, string newValue, StringComparison comparisionType)
{
    string result = original;

    if (!string.IsNullOrEmpty(oldValue))
    {
        int index = -1;
        int lastIndex = 0;

        System.Text.StringBuilder buffer = new System.Text.StringBuilder(original.Length);

        while ((index = original.IndexOf(oldValue, index + 1, comparisionType)) >= 0)
        {
            buffer.Append(original, lastIndex, index - lastIndex);
            buffer.Append(newValue);

            lastIndex = index + oldValue.Length;
        }
        buffer.Append(original, lastIndex, original.Length - lastIndex);

        result = buffer.ToString();
    }

    return result;
}

public sealed class FluentCode
{
    private readonly Dictionary<string, FluentNamespace> mNamespaces =
        new Dictionary<string, FluentNamespace>(StringComparer.OrdinalIgnoreCase);

    public FluentNamespace Namespace(string name)
    {
        FluentNamespace res;

        if (!mNamespaces.TryGetValue(name, out res)) {
            res = new FluentNamespace(name);
            mNamespaces.Add(name, res);
        }
        return res;
    }

    public string GenerateCode()
    {
        var res = "";
        foreach (var n in mNamespaces)
            res += n.Value.GenerateCode();

        return res;
    }
}

public sealed class FluentNamespace
{
    public string Name { get; private set; }

    public FluentNamespace(string name)
    {
        this.Name = name;
    }

    private readonly SortedDictionary<string, FluentClass> mClasses =
        new SortedDictionary<string, FluentClass>(StringComparer.OrdinalIgnoreCase);

    public FluentClass Class(string name)
    {
        FluentClass res = null;

        if (!mClasses.TryGetValue(name, out res)) {
            res = new FluentClass(name, null, 1);
            mClasses.Add(name, res);
        }

        return res;
    }


    public string GenerateCode()
    {
        var res = new StringBuilder();
        res.AppendLine(String.Format("namespace {0}", Name));
        res.AppendLine("{");
        res.Append(String.Join(Environment.NewLine, mClasses.Select(s => s.Value.GenerateCode())));
        res.Append("}");
        return res.ToString();
    }
}

/// <summary>
/// Create a class from a template
/// </summary>
public sealed class FluentClass
{
    public string Name { get; private set; }
    public string Parent { get; private set; }
    public int Level { get; private set; }
        
    public FluentClass(string name, string parent, int level)
    {
        this.Name = name;
        this.Parent = parent;
        this.Level = level;
    }

    private readonly SortedDictionary<string, FluentClass> mClasses =
        new SortedDictionary<string, FluentClass>(StringComparer.OrdinalIgnoreCase);

    /// <summary>
    /// Create a class of "name"
    /// </summary>
    /// <param name="name">Name of resulting class</param>
    /// <returns></returns>
    public FluentClass Class(string name, string parent)
    {
        FluentClass res;

        if (!mClasses.TryGetValue(name, out res)) {
            res = new FluentClass(name, parent, this.Level + 1);
            mClasses.Add(name, res);
        }

        return res;
    }

    public string GenerateCode()
    {
        var res = new StringBuilder();
        AddCode(string.Format("public partial class {0}{1}", Name, (string.IsNullOrEmpty(Parent) ? "" : " : " + Parent)), Level, res);
        AddCode("{", Level, res);

        res.Append(String.Join(Environment.NewLine, mClasses.Select(s => s.Value.GenerateCode())));
        res.Append(mCode.ToString());

        AddCode("}", Level, res);
        return res.ToString();
    }

    /// <summary>
    /// Append a line of code to the output
    /// </summary>
    /// <param name="code">Code to add</param>
    public void AddCode(string code, int level)
    {
        AddCode(code, level, mCode);
    }

    private void AddCode(string code, int level, StringBuilder builder)
    {
        builder.AppendLine(string.Format("{0}{1}", new string(' ', level * 4), code));
    }

    /// <summary>
    /// Add a static readonly property with the member property having a prefix of m
    /// </summary>
    /// <param name="type">Type of varaible to create</param>
    /// <param name="name">Name of property</param>
    /// <remarks>
    /// private static String mX = new String();
    /// public static String X
    /// { get { return  mX; } }
    /// </remarks>
    public void AddStaticReadOnlyPropertyWithBackingField(string type, string name)
    {
        if (mCode.Length != 0)
        {
            AddCode(null, 0);
        }

        AddCode(string.Format("private static {0} m{1} = new {0}();", type, name), Level + 1);
        AddCode(null, 0);
        AddCode(string.Format("public static {0} {1}", type, name), Level + 1);
        AddCode("{", Level + 1);
        AddCode("get { return m" + name + "; }", Level + 2);
        AddCode("}", Level + 1);
    }

    /// <summary>
    /// Internal result of parsing the data
    /// </summary>
    private readonly StringBuilder mCode = new StringBuilder();
}
#>