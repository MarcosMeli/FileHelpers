<?xml version="1.0" encoding="utf-8" ?> 
<doc>
	<MasterDetailEngine>
		<summary>
			<para><b>One of the main classes of the library.</b></para>
			<para>This engine is responsible for reading and writing <b>Master-Details</b> records to or from files or streams.</para>
		</summary>
		<remarks>
		 <para>You can set the <see cref="ErrorManager.ErrorMode"/> of this class to
         defined how to handle an error.
         Errors can be retrieved with the <see cref="ErrorManager.Errors"/> property if set appropriately.</para>
		 <para>See in the <a href="http://www.filehelpers.net/diagrams/">Class Diagram</a> and
         in the <a href="http://www.filehelpers.net/quickstart/">Quick Start Guide</a> for more Info.</para>
		 <para>Or you can browse the <a href="http://www.filehelpers.net/examples/">Examples Section</a> for more code.</para>
		</remarks>
		<seealso href="http://www.filehelpers.net/quickstart/">Quick Start Guide</seealso>
		<seealso href="http://www.filehelpers.net/diagrams/">Class Diagram</seealso>
		<seealso href="http://www.filehelpers.net/examples/">Examples of Use</seealso>
		<seealso href="http://www.filehelpers.net/attributes/">Attributes List</seealso>
	</MasterDetailEngine>


	<MasterDetailEngineCtr>
		<summary>
			 Initializes a new instance of the MasterDetailEngine class with the specified type of records.
		</summary>
	</MasterDetailEngineCtr>

	<ReadFile>
		<summary>
		Read a file and return an array of the contained records.
		</summary>
		<remarks>
		This method opens, reads and closes the file (don't open or close the file before or after calling this method)
		</remarks>
		<include file='Examples.xml' path='doc/examples/MasterDetail/*'/>
		<param name="fileName">The file path to be read.</param>
		<returns>An array of the records in the file</returns>
	</ReadFile>

	<ReadStream>
		<summary>
		Read a Stream and return an array of the contained records.
		</summary>
		<remarks>
		This method only uses the stream and does not close it after using it, you must do it.
		</remarks>
		<include file='Examples.xml' path='doc/examples/MasterDetail/*'/>
		<param name="reader">The reader of the source stream.</param>
		<returns>An array of the records in the Stream</returns>
	</ReadStream>

	<ReadString>
		<summary>
		Read a String and return an array of the contained records.
		</summary>
		<param name="source">The string that contains the records.</param>
		<returns>An array of the records in the String.</returns>
	</ReadString>

	<AppendToFile1>
		<summary>
		Append a record to the specified file.
		</summary>
		<remarks>
		This method opens, seek to the end, writes and closes the file
        (don't open or close the file before or after calling this method)
		</remarks>
		<include file='Examples.xml' path='doc/examples/MasterDetail/*'/>
		<param name="fileName">The file path to be written at end.</param>
		<param name="record">The record to write.</param>
		<returns>True if the operation is successful. False otherwise.</returns>
	</AppendToFile1>

	<AppendToFile2>
		<summary>
		Append an array of records to the specified file.
		</summary>
		<remarks>
		This method opens, seek to the end, writes and closes the file
        (don't open or close the file before or after calling this method)
		</remarks>
		<include file='Examples.xml' path='doc/examples/MasterDetail/*'/>
	
		<param name="fileName">The file path to be written at end.</param>
		<param name="records">The array of records to write.</param>
		<returns>True if the operation is successful. False otherwise.</returns>
	</AppendToFile2>

	<WriteFile>
		<summary>
		Write an array of records to the specified file.
		</summary>
		<remarks>
		<para>This method opens, writes and closes the file
        (don't open or close the file before or after calling this method)</para>
		<para>This method over writes any existing file.</para>
		</remarks>
		<include file='Examples.xml' path='doc/examples/MasterDetail/*'/>
		<param name="fileName">The file path to be write.</param>
		<param name="records">The array of records to write.</param>
		<returns>True if the operation is successful. False otherwise.</returns>
	</WriteFile>

	<WriteFile2>
		<summary>
		Write the specified number of records from the array to a file.
		</summary>
		<remarks>
		<para>This method opens, writes and closes the file
        (don't open or close the file before or after calling this method)</para>
		<para>This method over writes existing files.</para>
		</remarks>
		<include file='Examples.xml' path='doc/examples/MasterDetail/*'/>
		<param name="fileName">The file path to be write.</param>
		<param name="records">The array of records to write.</param>
		<param name="maxRecords">The max number of array elements to write.</param>
		<returns>True if the operation is successful. False otherwise.</returns>
	</WriteFile2>

	<WriteStream>
		<summary>
		Write an array of records to the specified Stream.
		</summary>
		<remarks>
		This method only uses the stream and does not close it after using it, you must do it.
		</remarks>
		<include file='Examples.xml' path='doc/examples/MasterDetail/*'/>
		<param name="writer">The writer of the source stream.</param>
		<param name="records">The array of records to write.</param>
		<returns>True if the operation is successful. False otherwise.</returns>
	</WriteStream>

	<WriteStream2>
		<summary>
		Write the specified number of records in the array to the Stream.
		</summary>
		<remarks>
		This method only uses the stream and does not close it after using it, you must do it.
		</remarks>
		<include file='Examples.xml' path='doc/examples/MasterDetail/*'/>
		<param name="writer">The writer of the source stream.</param>
		<param name="records">The array of records to write.</param>
		<param name="maxRecords">The max number of array elements to write.</param>
		<returns>True if the operation is successful. False otherwise.</returns>
	</WriteStream2>

	<WriteString>
		<summary>
		Write an array of records to an String and return it.
		</summary>
		<param name="records">The array of records to write.</param>
		<returns>The resulting string after write the records.</returns>
	</WriteString>

	<WriteString2>
		<summary>
		Write an array of records to an String and return it.
		</summary>
		<param name="records">The array of records to write.</param>
		<returns>The resulting string after write the records.</returns>
		<param name="maxRecords">The max number of array elements to write.</param>
		<returns>True if the operation is successful. False otherwise.</returns>
	</WriteString2>

	<LineNum>
		<summary>The current line number.</summary>
	</LineNum>

	<ColumnNum>
		<summary>The current column number.</summary>
	</ColumnNum>

	<TotalRecords>
		<summary>
            The total number of records in the last file that was read or written
            (only works with whole read/write).
        </summary>
	</TotalRecords>

	<RecordType>
		<summary>Returns the type of records handled by this engine.</summary>
	</RecordType>

</doc>
